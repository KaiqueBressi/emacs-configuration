<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Diagram Viewer</title>

    <!-- viewer distro -->
    <script src="node_modules/bpmn-js/dist/bpmn-viewer.production.min.js"></script>

    <!-- example styles -->
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
      }

      html, body, #canvas {
        height: 100%;
        padding: 0;
        margin: 0;
      }

      .footer {
        position: absolute;
        bottom: 15px;
        left: 15px;
      }

      #title {
        font-size: .85em;
        color: #AAA;
        font-weight: normal;
        padding: 5px 0;
        margin: 0;
      }
    </style>
  </head>
  <body>
    <div id="canvas"></div>

    <div class="footer">
      <h4 id="title"></h4>
    </div>

    <script>

      // viewer instance
      var bpmnViewer = new BpmnJS({
        container: '#canvas'
      });

      // access viewer components
      var canvas = bpmnViewer.get('canvas');


      bpmnViewer.on('import.done', function(event) {

        var error = event.error;
        var warnings = event.warnings;

        if (error) {
          return console.error('could not import BPMN 2.0 diagram', error);
        }

        // zoom to fit full viewport
        canvas.zoom('fit-viewport');
      });


      /**
       * Open diagram in our viewer instance.
       *
       * @param {String} bpmnXML diagram to display
       * @param {Object} [options]
       * @param {Dimensions} [options.minDimensions]
       *
       * @return {Promise<Bounds, Error>}
       */
      function openDiagram(bpmnXML, options) {

        options = options || {};

        var minDimensions = options.minDimensions || {
          width: 0,
          height: 0
        };

        var title = options.title;

        var footer = options.footer;

        return new Promise(function(resolve, reject) {
          bpmnViewer.importXML(bpmnXML, function(err) {

            if (err) {
              return reject(err);
            }

            var viewbox = canvas.viewbox();

            // uses provided title
            var titleNode = document.querySelector('#title');

            if (title) {
              titleNode.textContent = title;
            }

            titleNode.style.display = title ? 'block' : 'none';

            var width = Math.max(viewbox.inner.width, minDimensions.width);
            var diagramHeight = Math.max(viewbox.inner.height + (footer ? 90 : 0), minDimensions.height);

            var desiredViewport = {
              width,
              height: diagramHeight + (footer ? 0 : 90),
              diagramHeight
            };

            return resolve(desiredViewport);
          });
        });
      }

      function resize() {
        return new Promise(function(resolve, reject) {
          canvas.resized();

          canvas.zoom('fit-viewport');

          return resolve();
        });
      }
    </script>
  </body>
</html>