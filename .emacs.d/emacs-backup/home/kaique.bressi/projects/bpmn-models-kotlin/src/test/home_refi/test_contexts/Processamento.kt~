package home_refi.test_contexts

import org.camunda.bpm.engine.test.Deployment
import org.camunda.bpm.engine.test.ProcessEngineRule
import org.junit.Rule
import org.junit.Test
import org.camunda.bpm.engine.test.assertions.ProcessEngineAssertions.assertThat
import org.camunda.bpm.engine.test.assertions.ProcessEngineTests.taskQuery
import home_refi.tests.helpers.FluxoHomeTestUtils

@Deployment(resources = ["./home_refi/FluxoHome.bpmn", "./home_refi/DecisoesFluxoHome.dmn"])
class Processamento {
    @Rule @JvmField
    var processEngineRule = ProcessEngineRule()

    private val utils = FluxoHomeTestUtils()

    @Test
    fun OperacaoComOPerfilLinhaVerdeIniciaAtendimentoEmProcessamento() {
        val variables = utils.greenLineVariables()

        val processInstance = utils.startProcess(variables)

        assertThat(processInstance).isWaitingAt("Processamento")
    }

    @Test
    fun OperacaoComOPerfilLinhaVerdeSub40kIniciaAtendimentoEmProcessamento() {
        val variables = utils.greenLineVariables()
        variables.put("loan_amount", 30000)

        val processInstance = utils.startProcess(variables)

        assertThat(processInstance).isWaitingAt("Processamento")
    }

    @Test
    fun OperacaoDePerfilLinhaVerdeDeveSerAssociadaPeloCandidateGroupProcessamentoLinhaVerde() {
        val variables = utils.greenLineVariables()

        val processInstance = utils.startProcess(variables)

        assertThat(processInstance).task(taskQuery().taskCandidateGroup("ProcessamentoLinhaVerde")).isNotNull()
    }

    @Test
    fun OperacaoDePerfilPadraoDeveSerAssociadaPeloCandidateGroupProcessamentoPadrao() {
        val variables = utils.variablesForPreLaudoStart()

        val processInstance = utils.startProcess(variables)
        utils.completePreLaudoTask("APPROVED")

        assertThat(processInstance).task(taskQuery().taskCandidateGroup("ProcessamentoPadrao")).isNotNull()
    }
}
