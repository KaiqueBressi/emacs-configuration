import pytest

from mock import patch

from hermes.domain.contact.enums import ProductType
from hermes.consumer.core.home_refi.handlers.application_assigned import ApplicationAssigned
from tests.factories.contact import ContactFactory


@pytest.fixture
def message_fixture():
    return {
        'metadata': {
            'timestamp': '2018-11-16 16:59:44 -0200',
            'name': 'application_assigned',
            'uuid': 'ccab3831-e8f9-4a74-937a-a6230d06ab5c',
            'request_id': '98d3ee557871aae1f79d6f2afa2dce74'
        },
        'activity_key': 'Processamento',
        'operation_id': 'feb915d4-e983-4322-9791-9ba713e51065',
        'consultant_id': 'a133a3d2-c8ac-11e8-a148-435655b7df27',
    }


@patch('hermes.consumer.core.home_refi.handlers.activity_assigned.assign_contact')
@patch(
    'hermes.consumer.core.home_refi.handlers.activity_assigned.ActivityAssigned.fetch_contact'
)
@patch('hermes.consumer.core.home_refi.handlers.activity_assigned.OutboundClient')
@patch('hermes.consumer.core.home_refi.handlers.activity_assigned.telemetry')
def test_activity_assigned(
        telemetry_mock, outbound_client_mock, fetch_contact_mock,
        mock_assign_worker, message_fixture
):
    '''
    Notify outbound about application_assigned correctly and report metric to telemetry
    '''
    contact = ContactFactory.build(id='5c0b2dae-c3b9-4323-a93b-55a63e2d0d9d')
    fetch_contact_mock.return_value = contact
    message = message_fixture

    ActivityAssigned().handle(message=message)

    outbound_client_mock().track.assert_called_once_with(
        '5c0b2dae-c3b9-4323-a93b-55a63e2d0d9d',
        event_name='Carteirizado Por Comercial'
    )

    telemetry_mock.assert_called_once_with(component='activity_assigned', status='success')
    mock_assign_worker.delay.assert_called_once_with(
        params={
            'reference': message['operation_id'],
            'product': ProductType.HOME_REFI.value,
            'origin': 'journey',
            'consultant_id': message['consultant_id']
        }
    )


@patch('hermes.consumer.core.home_refi.handlers.activity_assigned.assign_contact')
@patch(
    'hermes.consumer.core.home_refi.handlers.activity_assigned.ActivityAssigned.fetch_contact'
)
@patch('hermes.consumer.core.home_refi.handlers.activity_assigned.OutboundClient')
@patch('hermes.consumer.core.home_refi.handlers.activity_assigned.telemetry')
def test_activity_was_not_processing(
        telemetry_mock, outbound_client_mock, fetch_contact_mock,
        mock_assign_worker, message_fixture
):
    '''
    Notify outbound about application_assigned correctly and report metric to telemetry
    '''
    contact = ContactFactory.build(id='5c0b2dae-c3b9-4323-a93b-55a63e2d0d9d')
    fetch_contact_mock.return_value = contact
    message = message_fixture
    message['activity_key'] = 'PreLaudo'

    ActivityAssigned().handle(message=message)

    assert not outbound_client_mock().track.called
    assert not telemetry_mock.called
    assert not mock_assign_worker.delay().called
    assert not outbound_client_mock().called
