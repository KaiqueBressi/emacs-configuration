require 'logger'
require 'json'
require 'concurrent'
require 'httparty'

class Camunda
  include HTTParty

  logger ::Logger.new($stdout)

  base_uri 'https://api.stg.creditas.io/v0/journey-v2'

  headers 'Authorization' => "Bearer #{ENV.fetch('TOKEN')}", 'Content-Type' => 'application/json'
end

def tasks_filter
  JSON.dump(
    {
      "processDefinitionId" => "FluxoHome:22:f36d57a1-d329-11e9-8f0d-0242ac110003",
      "taskDefinitionKey" => "Processamento",
      "active" => true,
      "assigned" => true
    }
  )
end

def process_instances_filter(process_instances_ids)
  JSON.dump(
    {
      "processDefinitionId" => "FluxoHome:22:f36d57a1-d329-11e9-8f0d-0242ac110003",
      "processInstanceIds" => process_instances_ids
    }
  )
end

def correlate_message(business_key, consultant_id)
  JSON.dump(
    {
      "messageName" => "AddToPortfolio",
      "businessKey" => business_key,
      "processVariables" => {
        "consultantId" => {
          "value" => consultant_id,
          "type" => "String"
        },
        "portfolioName" => {
          "value" => "home-refi",
          "type" => "String"
        }
      }
    }
  )
end

pool = Concurrent::FixedThreadPool.new(256, fallback_policy: :caller_runs)

tasks_to_migrate = Camunda.post("/engine-rest/task", body: tasks_filter)
process_instances_ids = tasks_to_migrate.map { |task| task['processInstanceId'] }

process_instances = Camunda.post("/engine-rest/process-instance", body: process_instances_filter(process_instances_ids))

puts "Total de process instances: " + process_instances.count.to_s
puts "Total de Tasks de Processamento: " + tasks_to_migrate.count.to_s

puts "Tem certeza que deseja rodar a migração? Yes/No"

yesorno = gets.chomp
exit unless yesorno == "yes"

all_correlate_requests = process_instances.map do |process_instance|
  current_task = tasks_to_migrate.find { |task| task['processInstanceId'] == process_instance['id'] }

  consultant_id = current_task['assignee']
  business_key = process_instance['businessKey']

  Concurrent::Promises.future_on(pool) do
    response = Camunda.post("/engine-rest/message", body: correlate_message(business_key, consultant_id))

    unless response.code == 204
      File.open('errors.txt', 'a') do |f|
        f.write("Erro na hora de correlacionar mensagem: #{current_task['processInstanceId']} \n")
      end
    end
  end
end

all_correlate_requests.map(&:wait!)
